package org.roboquant.ta;

import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MAType;
import com.tictactec.ta.lib.MInteger;
import com.tictactec.ta.lib.RetCode;
import kotlin.Metadata;
import kotlin.Pair;
import kotlin.Triple;
import kotlin.collections.ArraysKt;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Intrinsics;
import org.jetbrains.annotations.NotNull;
import org.roboquant.common.DoesNotComputeException;

@Metadata(
   mv = {1, 9, 0},
   k = 1,
   xi = 48,
   d1 = {"\u0000K\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0010\u0006\n\u0000\n\u0002\u0010\u0013\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0010\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0010\u000b\n\u0003\b\u00ad\u0001\u0018\u00002\u00020\u0001B\u000f\u0012\b\b\u0002\u0010\u0002\u001a\u00020\u0003Â¢\u0006\u0002\u0010\u0004J\u0018\u0010\b\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010\b\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010\u0010\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\u0006\u0010\u0014\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010\u0010\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJD\u0010\u0015\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\u0006\u0010\u0014\u001a\u00020\u000b2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ,\u0010\u0015\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ \u0010\u0018\u001a\u00020\t2\u0006\u0010\u0019\u001a\u00020\u000b2\u0006\u0010\u001a\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ2\u0010\u001b\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010\u001b\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ2\u0010\u001d\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010\u001d\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ6\u0010\u001e\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ6\u0010\u001e\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ6\u0010!\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ.\u0010!\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ*\u0010#\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010#\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010$\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010$\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010%\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010%\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ2\u0010&\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010&\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010'\u001a\u00020\t2\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010'\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJR\u0010)\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010+\u001a\u00020\t2\b\b\u0002\u0010,\u001a\u00020\t2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJR\u0010)\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010+\u001a\u00020\t2\b\b\u0002\u0010,\u001a\u00020\t2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ*\u0010-\u001a\u00020\t2\u0006\u0010\u0019\u001a\u00020\u000b2\u0006\u0010\u001a\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010.\u001a\u00020\t2\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010.\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ2\u0010/\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010/\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u00100\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u00100\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u00102\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u00102\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u00103\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u00103\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u00104\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u00104\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u00105\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u00105\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u00106\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u00106\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u00107\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u00107\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u00108\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u00108\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010:\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010:\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010;\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010;\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010<\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010<\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010=\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010=\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010>\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010>\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010?\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010?\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u0010@\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010@\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010A\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010A\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010B\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010B\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010C\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010C\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010D\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010D\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u0010E\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010E\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u0010F\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010F\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010G\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010G\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010H\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010H\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010I\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010I\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010J\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010J\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010K\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010K\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010L\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010L\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010M\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010M\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010N\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010N\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010O\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010O\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010P\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010P\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010Q\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010Q\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010R\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010R\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010S\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010S\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010T\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010T\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010U\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010U\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010V\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010V\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010W\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010W\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010X\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010X\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010Y\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010Y\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u0010Z\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010Z\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010[\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010[\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u0010\\\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010\\\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u0010]\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010]\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u00109\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010^\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010^\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010_\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010_\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010`\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010`\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010a\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010a\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010b\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010b\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010c\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010c\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010d\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010d\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010e\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010e\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010f\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010f\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010g\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010g\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010h\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010h\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010i\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010i\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010j\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010j\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010k\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010k\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010l\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010l\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010m\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010m\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ0\u0010n\u001a\u0002012\u0006\u0010(\u001a\u00020\u000b2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010n\u001a\u0002012\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010o\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010o\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010p\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010p\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ*\u0010q\u001a\u00020\t2\u0006\u0010\u0019\u001a\u00020\u000b2\u0006\u0010\u001a\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010r\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010r\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010s\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010s\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010t\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010t\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ \u0010u\u001a\u00020\t2\u0006\u0010\u0019\u001a\u00020\u000b2\u0006\u0010\u001a\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ2\u0010v\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010v\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010w\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\"\u0010w\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010x\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010x\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010y\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010y\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010z\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010z\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010{\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010{\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ$\u0010|\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ$\u0010|\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ$\u0010}\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ$\u0010}\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010~\u001a\u00020\r2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010~\u001a\u00020\r2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010\u007f\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0018\u0010\u007f\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0080\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0080\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0081\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0081\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0082\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0082\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0083\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0083\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0084\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0084\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010\u0085\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010\u0085\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010\u0086\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010\u0086\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJJ\u0010\u0087\u0001\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\t\b\u0002\u0010\u0088\u0001\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJJ\u0010\u0087\u0001\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\t\b\u0002\u0010\u0088\u0001\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJk\u0010\u0089\u0001\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u0016\u001a\u00020\r2\t\b\u0002\u0010\u008a\u0001\u001a\u00020 2\b\b\u0002\u0010\u0017\u001a\u00020\r2\t\b\u0002\u0010\u008b\u0001\u001a\u00020 2\t\b\u0002\u0010\u0088\u0001\u001a\u00020\r2\t\b\u0002\u0010\u008c\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJk\u0010\u0089\u0001\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u0016\u001a\u00020\r2\t\b\u0002\u0010\u008a\u0001\u001a\u00020 2\b\b\u0002\u0010\u0017\u001a\u00020\r2\t\b\u0002\u0010\u008b\u0001\u001a\u00020 2\t\b\u0002\u0010\u0088\u0001\u001a\u00020\r2\t\b\u0002\u0010\u008c\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ6\u0010\u008d\u0001\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\n\u001a\u00020\u000b2\t\b\u0002\u0010\u0088\u0001\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ6\u0010\u008d\u0001\u001a\u0014\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0*2\u0006\u0010\u000e\u001a\u00020\u000f2\t\b\u0002\u0010\u0088\u0001\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ;\u0010\u008e\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\n\u001a\u00020\u000b2\t\b\u0002\u0010\u008f\u0001\u001a\u00020\t2\t\b\u0002\u0010\u0090\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ;\u0010\u008e\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\t\b\u0002\u0010\u008f\u0001\u001a\u00020\t2\t\b\u0002\u0010\u0090\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0091\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0091\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0092\u0001\u001a\u00020\r2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0092\u0001\u001a\u00020\r2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ!\u0010\u0093\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010\u0093\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ;\u0010\u0094\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\u0006\u0010\u0014\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0094\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0095\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0095\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ+\u0010\u0096\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0096\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0097\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0097\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0098\u0001\u001a\u00020\r2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u0098\u0001\u001a\u00020\r2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ/\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ/\u0010\u0099\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ/\u0010\u009a\u0001\u001a\u000e\u0012\u0004\u0012\u00020\r\u0012\u0004\u0012\u00020\r0\"2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ/\u0010\u009a\u0001\u001a\u000e\u0012\u0004\u0012\u00020\r\u0012\u0004\u0012\u00020\r0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ3\u0010\u009b\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u009b\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ+\u0010\u009c\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u009c\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u009d\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u009d\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ-\u0010\u009e\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ-\u0010\u009e\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJB\u0010\u009f\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\u0007\u0010Â \u0001\u001a\u00020\u000b2\t\b\u0002\u0010Â¡\u0001\u001a\u00020\r2\t\b\u0002\u0010Â¢\u0001\u001a\u00020\r2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ!\u0010Â£\u0001\u001a\u00020\t2\u0006\u0010\u0019\u001a\u00020\u000b2\u0006\u0010\u001a\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ3\u0010Â¤\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â¤\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ!\u0010Â¥\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\u0006\u0010\u0014\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ3\u0010Â¦\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â¦\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ+\u0010Â§\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â§\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ7\u0010Â¨\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ7\u0010Â¨\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u0016\u001a\u00020\r2\b\b\u0002\u0010\u0017\u001a\u00020\r2\b\b\u0002\u0010\u001f\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â©\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â©\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Âª\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Âª\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â«\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â«\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â¬\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â¬\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u00ad\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010\u00ad\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ7\u0010Â®\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\t\b\u0002\u0010Â¯\u0001\u001a\u00020\t2\t\b\u0002\u0010Â°\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ/\u0010Â®\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\t\b\u0002\u0010Â¯\u0001\u001a\u00020\t2\t\b\u0002\u0010Â°\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJy\u0010Â±\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\t\b\u0002\u0010Â²\u0001\u001a\u00020\t2\t\b\u0002\u0010Â³\u0001\u001a\u00020\t2\t\b\u0002\u0010Â´\u0001\u001a\u00020\t2\t\b\u0002\u0010Âµ\u0001\u001a\u00020\t2\t\b\u0002\u0010Â¶\u0001\u001a\u00020\t2\t\b\u0002\u0010Â·\u0001\u001a\u00020\t2\t\b\u0002\u0010Â¸\u0001\u001a\u00020\t2\t\b\u0002\u0010Â¹\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJq\u0010Â±\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\t\b\u0002\u0010Â²\u0001\u001a\u00020\t2\t\b\u0002\u0010Â³\u0001\u001a\u00020\t2\t\b\u0002\u0010Â´\u0001\u001a\u00020\t2\t\b\u0002\u0010Âµ\u0001\u001a\u00020\t2\t\b\u0002\u0010Â¶\u0001\u001a\u00020\t2\t\b\u0002\u0010Â·\u0001\u001a\u00020\t2\t\b\u0002\u0010Â¸\u0001\u001a\u00020\t2\t\b\u0002\u0010Â¹\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Âº\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Âº\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Â»\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Â»\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â¼\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Â¼\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Â½\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Â½\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ.\u0010Â¾\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Â¿\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ.\u0010Â¾\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Â¿\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJl\u0010Ã\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ\\\u0010Ã\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJV\u0010Ã\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJF\u0010Ã\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJP\u0010Ã\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJP\u0010Ã\u0001\u001a\u000e\u0012\u0004\u0012\u00020\t\u0012\u0004\u0012\u00020\t0\"2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020 2\b\b\u0002\u0010\f\u001a\u00020\rJ!\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u0019\u001a\u00020\u000b2\u0006\u0010\u001a\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ.\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ.\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ)\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ)\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJJ\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ:\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\t\b\u0002\u0010Ã\u0001\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ.\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Â¿\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ.\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\t\b\u0002\u0010Â¿\u0001\u001a\u00020\t2\b\b\u0002\u0010\f\u001a\u00020\rJ)\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\f\u001a\u00020\rJ\u0019\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\f\u001a\u00020\rJ3\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u0011\u001a\u00020\u000b2\u0006\u0010\u0012\u001a\u00020\u000b2\u0006\u0010\u0013\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\n\u001a\u00020\u000b2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rJ#\u0010Ã\u0001\u001a\u00020\t2\u0006\u0010\u000e\u001a\u00020\u000f2\b\b\u0002\u0010\u001c\u001a\u00020\r2\b\b\u0002\u0010\f\u001a\u00020\rR\u001a\u0010\u0002\u001a\u00020\u0003X\u0086\u000eÂ¢\u0006\u000e\n\u0000\u001a\u0004\b\u0005\u0010\u0006\"\u0004\b\u0007\u0010\u0004Â¨\u0006Ã\u0001"},
   d2 = {"Lorg/roboquant/ta/TaLib;", "", "core", "Lcom/tictactec/ta/lib/Core;", "(Lcom/tictactec/ta/lib/Core;)V", "getCore", "()Lcom/tictactec/ta/lib/Core;", "setCore", "acos", "", "data", "", "previous", "", "serie", "Lorg/roboquant/ta/PriceBarSeries;", "ad", "high", "low", "close", "volume", "adOsc", "fastPeriod", "slowPeriod", "add", "data0", "data1", "adx", "timePeriod", "adxr", "apo", "mAType", "Lcom/tictactec/ta/lib/MAType;", "aroon", "Lkotlin/Pair;", "aroonOsc", "asin", "atan", "atr", "avgPrice", "open", "bbands", "Lkotlin/Triple;", "deviationsup", "deviationsdown", "beta", "bop", "cci", "cdl2Crows", "", "cdl3BlackCrows", "cdl3Inside", "cdl3LineStrike", "cdl3Outside", "cdl3StarsInSouth", "cdl3WhiteSoldiers", "cdlAbandonedBaby", "penetration", "cdlAdvanceBlock", "cdlBeltHold", "cdlBreakaway", "cdlClosingMarubozu", "cdlConcealBabysWall", "cdlCounterAttack", "cdlDarkCloudCover", "cdlDoji", "cdlDojiStar", "cdlDragonflyDoji", "cdlEngulfing", "cdlEveningDojiStar", "cdlEveningStar", "cdlGapSideSideWhite", "cdlGravestoneDoji", "cdlHammer", "cdlHangingMan", "cdlHarami", "cdlHaramiCross", "cdlHignWave", "cdlHikkake", "cdlHikkakeMod", "cdlHomingPigeon", "cdlIdentical3Crows", "cdlInNeck", "cdlInvertedHammer", "cdlKicking", "cdlKickingByLength", "cdlLadderBottom", "cdlLongLeggedDoji", "cdlLongLine", "cdlMarubozu", "cdlMatHold", "cdlMatchingLow", "cdlMorningDojiStar", "cdlMorningStar", "cdlOnNeck", "cdlPiercing", "cdlRickshawMan", "cdlRiseFall3Methods", "cdlSeperatingLines", "cdlShootingStar", "cdlShortLine", "cdlSpinningTop", "cdlStalledPattern", "cdlStickSandwich", "cdlTakuri", "cdlTasukiGap", "cdlThrusting", "cdlTristar", "cdlUnique3River", "cdlUpsideGap2Crows", "cdlXSideGap3Methods", "ceil", "cmo", "correl", "cos", "cosh", "dema", "div", "dx", "ema", "exp", "floor", "htDcPeriod", "htDcPhase", "htPhasor", "htSine", "htTrendMode", "htTrendline", "kama", "linearReg", "linearRegAngle", "linearRegIntercept", "linearRegSlope", "ln", "log10", "macd", "signalPeriod", "macdExt", "fastMA", "slowMA", "signalMA", "macdFix", "mama", "fastLimit", "slowLimit", "max", "maxIndex", "medPrice", "mfi", "midPoint", "midPrice", "min", "minIndex", "minMax", "minMaxIndex", "minusDI", "minusDM", "mom", "movingAverage", "movingAverageVariablePeriod", "inPeriods", "minimumPeriod", "maximumPeriod", "mult", "natr", "obv", "plusDI", "plusDM", "ppo", "roc", "rocP", "rocR", "rocR100", "rsi", "sar", "accelerationFactor", "aFMaximum", "sarExt", "startValue", "offsetonReverse", "aFInitLong", "aFLong", "aFMaxLong", "aFInitShort", "aFShort", "aFMaxShort", "sin", "sinh", "sma", "sqrt", "stdDev", "deviations", "stoch", "fastKPeriod", "slowKPeriod", "slowKMA", "slowDPeriod", "slowDMA", "stochF", "fastDPeriod", "fastDMA", "stochRsi", "sub", "sum", "t3", "volumeFactor", "tan", "tanh", "tema", "trima", "trix", "trueRange", "tsf", "typPrice", "ultOsc", "firstPeriod", "secondPeriod", "thirdPeriod", "variance", "wclPrice", "willR", "wma", "roboquant"}
)
public final class TaLib {
   @NotNull
   private Core core;

   public TaLib(@NotNull Core core) {
      Intrinsics.checkNotNullParameter(core, "core");
      super();
      this.core = core;
   }

   // $FF: synthetic method
   public TaLib(Core var1, int var2, DefaultConstructorMarker var3) {
      if ((var2 & 1) != 0) {
         var1 = new Core();
      }

      this(var1);
   }

   @NotNull
   public final Core getCore() {
      return this.core;
   }

   public final void setCore(@NotNull Core var1) {
      Intrinsics.checkNotNullParameter(var1, "<set-?>");
      this.core = var1;
   }

   public final double acos(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.acos(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.acosLookback() + previous;
         throw new InsufficientData("acos", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double acos$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.acos(var1, var2);
   }

   public final double acos(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.acos(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double acos$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.acos(var1, var2);
   }

   public final double ad(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, @NotNull double[] volume, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      Intrinsics.checkNotNullParameter(volume, "volume");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.ad(endIdx, endIdx, high, low, close, volume, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.adLookback() + previous;
         throw new InsufficientData("ad", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double ad$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.ad(var1, var2, var3, var4, var5);
   }

   public final double ad(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.ad(serie.getHigh(), serie.getLow(), serie.getClose(), serie.getVolume(), previous);
   }

   // $FF: synthetic method
   public static double ad$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.ad(var1, var2);
   }

   public final double add(@NotNull double[] data0, @NotNull double[] data1, int previous) {
      Intrinsics.checkNotNullParameter(data0, "data0");
      Intrinsics.checkNotNullParameter(data1, "data1");
      int endIdx = ArraysKt.getLastIndex(data0) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.add(endIdx, endIdx, data0, data1, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.addLookback() + previous;
         throw new InsufficientData("add", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double add$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, Object var5) {
      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.add(var1, var2, var3);
   }

   public final double adOsc(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, @NotNull double[] volume, int fastPeriod, int slowPeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      Intrinsics.checkNotNullParameter(volume, "volume");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.adOsc(endIdx, endIdx, high, low, close, volume, fastPeriod, slowPeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.adOscLookback(fastPeriod, slowPeriod) + previous;
         throw new InsufficientData("adOsc", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double adOsc$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = 3;
      }

      if ((var8 & 32) != 0) {
         var6 = 10;
      }

      if ((var8 & 64) != 0) {
         var7 = 0;
      }

      return var0.adOsc(var1, var2, var3, var4, var5, var6, var7);
   }

   public final double adOsc(@NotNull PriceBarSeries serie, int fastPeriod, int slowPeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.adOsc(serie.getHigh(), serie.getLow(), serie.getClose(), serie.getVolume(), fastPeriod, slowPeriod, previous);
   }

   // $FF: synthetic method
   public static double adOsc$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 3;
      }

      if ((var5 & 4) != 0) {
         var3 = 10;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.adOsc(var1, var2, var3, var4);
   }

   public final double adx(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.adx(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.adxLookback(timePeriod) + previous;
         throw new InsufficientData("adx", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double adx$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.adx(var1, var2, var3, var4, var5);
   }

   public final double adx(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.adx(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double adx$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.adx(var1, var2, var3);
   }

   public final double adxr(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.adxr(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.adxrLookback(timePeriod) + previous;
         throw new InsufficientData("adxr", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double adxr$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.adxr(var1, var2, var3, var4, var5);
   }

   public final double adxr(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.adxr(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double adxr$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.adxr(var1, var2, var3);
   }

   public final double apo(@NotNull double[] data, int fastPeriod, int slowPeriod, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.apo(endIdx, endIdx, data, fastPeriod, slowPeriod, mAType, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.apoLookback(fastPeriod, slowPeriod, mAType) + previous;
         throw new InsufficientData("apo", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double apo$default(TaLib var0, double[] var1, int var2, int var3, MAType var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 12;
      }

      if ((var6 & 4) != 0) {
         var3 = 26;
      }

      if ((var6 & 8) != 0) {
         var4 = MAType.Ema;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.apo(var1, var2, var3, var4, var5);
   }

   public final double apo(@NotNull PriceBarSeries serie, int fastPeriod, int slowPeriod, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      return this.apo(serie.getClose(), fastPeriod, slowPeriod, mAType, previous);
   }

   // $FF: synthetic method
   public static double apo$default(TaLib var0, PriceBarSeries var1, int var2, int var3, MAType var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 12;
      }

      if ((var6 & 4) != 0) {
         var3 = 26;
      }

      if ((var6 & 8) != 0) {
         var4 = MAType.Ema;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.apo(var1, var2, var3, var4, var5);
   }

   @NotNull
   public final Pair aroon(@NotNull double[] high, @NotNull double[] low, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.aroon(endIdx, endIdx, high, low, timePeriod, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.aroonLookback(timePeriod) + previous;
         throw new InsufficientData("aroon", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair aroon$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 4) != 0) {
         var3 = 14;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.aroon(var1, var2, var3, var4);
   }

   @NotNull
   public final Pair aroon(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.aroon(serie.getHigh(), serie.getLow(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static Pair aroon$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.aroon(var1, var2, var3);
   }

   public final double aroonOsc(@NotNull double[] high, @NotNull double[] low, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.aroonOsc(endIdx, endIdx, high, low, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.aroonOscLookback(timePeriod) + previous;
         throw new InsufficientData("aroonOsc", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double aroonOsc$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 4) != 0) {
         var3 = 14;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.aroonOsc(var1, var2, var3, var4);
   }

   public final double aroonOsc(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.aroonOsc(serie.getHigh(), serie.getLow(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double aroonOsc$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.aroonOsc(var1, var2, var3);
   }

   public final double asin(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.asin(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.asinLookback() + previous;
         throw new InsufficientData("asin", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double asin$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.asin(var1, var2);
   }

   public final double asin(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.asin(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double asin$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.asin(var1, var2);
   }

   public final double atan(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.atan(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.atanLookback() + previous;
         throw new InsufficientData("atan", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double atan$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.atan(var1, var2);
   }

   public final double atan(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.atan(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double atan$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.atan(var1, var2);
   }

   public final double atr(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.atr(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.atrLookback(timePeriod) + previous;
         throw new InsufficientData("atr", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double atr$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.atr(var1, var2, var3, var4, var5);
   }

   public final double atr(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.atr(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double atr$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.atr(var1, var2, var3);
   }

   public final double avgPrice(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.avgPrice(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.avgPriceLookback() + previous;
         throw new InsufficientData("avgPrice", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double avgPrice$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.avgPrice(var1, var2, var3, var4, var5);
   }

   public final double avgPrice(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.avgPrice(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double avgPrice$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.avgPrice(var1, var2);
   }

   @NotNull
   public final Triple bbands(@NotNull double[] data, int timePeriod, double deviationsup, double deviationsdown, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      double[] output3 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.bbands(endIdx, endIdx, data, timePeriod, deviationsup, deviationsdown, mAType, startOutput, endOutput, output1, output2, output3);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.bbandsLookback(timePeriod, deviationsup, deviationsdown, mAType) + previous;
         throw new InsufficientData("bbands", lookback + 1);
      } else {
         return new Triple(output1[0], output2[0], output3[0]);
      }
   }

   // $FF: synthetic method
   public static Triple bbands$default(TaLib var0, double[] var1, int var2, double var3, double var5, MAType var7, int var8, int var9, Object var10) {
      if ((var9 & 2) != 0) {
         var2 = 5;
      }

      if ((var9 & 4) != 0) {
         var3 = (double)2.0F;
      }

      if ((var9 & 8) != 0) {
         var5 = (double)2.0F;
      }

      if ((var9 & 16) != 0) {
         var7 = MAType.Ema;
      }

      if ((var9 & 32) != 0) {
         var8 = 0;
      }

      return var0.bbands(var1, var2, var3, var5, var7, var8);
   }

   @NotNull
   public final Triple bbands(@NotNull PriceBarSeries serie, int timePeriod, double deviationsup, double deviationsdown, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      return this.bbands(serie.getClose(), timePeriod, deviationsup, deviationsdown, mAType, previous);
   }

   // $FF: synthetic method
   public static Triple bbands$default(TaLib var0, PriceBarSeries var1, int var2, double var3, double var5, MAType var7, int var8, int var9, Object var10) {
      if ((var9 & 2) != 0) {
         var2 = 5;
      }

      if ((var9 & 4) != 0) {
         var3 = (double)2.0F;
      }

      if ((var9 & 8) != 0) {
         var5 = (double)2.0F;
      }

      if ((var9 & 16) != 0) {
         var7 = MAType.Ema;
      }

      if ((var9 & 32) != 0) {
         var8 = 0;
      }

      return var0.bbands(var1, var2, var3, var5, var7, var8);
   }

   public final double beta(@NotNull double[] data0, @NotNull double[] data1, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data0, "data0");
      Intrinsics.checkNotNullParameter(data1, "data1");
      int endIdx = ArraysKt.getLastIndex(data0) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.beta(endIdx, endIdx, data0, data1, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.betaLookback(timePeriod) + previous;
         throw new InsufficientData("beta", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double beta$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 4) != 0) {
         var3 = 5;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.beta(var1, var2, var3, var4);
   }

   public final double bop(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.bop(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.bopLookback() + previous;
         throw new InsufficientData("bop", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double bop$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.bop(var1, var2, var3, var4, var5);
   }

   public final double bop(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.bop(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double bop$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.bop(var1, var2);
   }

   public final double cci(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cci(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cciLookback(timePeriod) + previous;
         throw new InsufficientData("cci", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double cci$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cci(var1, var2, var3, var4, var5);
   }

   public final double cci(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cci(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double cci$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.cci(var1, var2, var3);
   }

   public final boolean cdl2Crows(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdl2Crows(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdl2CrowsLookback() + previous;
         throw new InsufficientData("cdl2Crows", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdl2Crows$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdl2Crows(var1, var2, var3, var4, var5);
   }

   public final boolean cdl2Crows(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdl2Crows(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdl2Crows$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdl2Crows(var1, var2);
   }

   public final boolean cdl3BlackCrows(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdl3BlackCrows(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdl3BlackCrowsLookback() + previous;
         throw new InsufficientData("cdl3BlackCrows", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdl3BlackCrows$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdl3BlackCrows(var1, var2, var3, var4, var5);
   }

   public final boolean cdl3BlackCrows(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdl3BlackCrows(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdl3BlackCrows$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdl3BlackCrows(var1, var2);
   }

   public final boolean cdl3Inside(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdl3Inside(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdl3InsideLookback() + previous;
         throw new InsufficientData("cdl3Inside", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdl3Inside$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdl3Inside(var1, var2, var3, var4, var5);
   }

   public final boolean cdl3Inside(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdl3Inside(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdl3Inside$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdl3Inside(var1, var2);
   }

   public final boolean cdl3LineStrike(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdl3LineStrike(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdl3LineStrikeLookback() + previous;
         throw new InsufficientData("cdl3LineStrike", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdl3LineStrike$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdl3LineStrike(var1, var2, var3, var4, var5);
   }

   public final boolean cdl3LineStrike(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdl3LineStrike(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdl3LineStrike$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdl3LineStrike(var1, var2);
   }

   public final boolean cdl3Outside(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdl3Outside(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdl3OutsideLookback() + previous;
         throw new InsufficientData("cdl3Outside", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdl3Outside$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdl3Outside(var1, var2, var3, var4, var5);
   }

   public final boolean cdl3Outside(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdl3Outside(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdl3Outside$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdl3Outside(var1, var2);
   }

   public final boolean cdl3StarsInSouth(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdl3StarsInSouth(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdl3StarsInSouthLookback() + previous;
         throw new InsufficientData("cdl3StarsInSouth", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdl3StarsInSouth$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdl3StarsInSouth(var1, var2, var3, var4, var5);
   }

   public final boolean cdl3StarsInSouth(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdl3StarsInSouth(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdl3StarsInSouth$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdl3StarsInSouth(var1, var2);
   }

   public final boolean cdl3WhiteSoldiers(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdl3WhiteSoldiers(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdl3WhiteSoldiersLookback() + previous;
         throw new InsufficientData("cdl3WhiteSoldiers", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdl3WhiteSoldiers$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdl3WhiteSoldiers(var1, var2, var3, var4, var5);
   }

   public final boolean cdl3WhiteSoldiers(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdl3WhiteSoldiers(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdl3WhiteSoldiers$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdl3WhiteSoldiers(var1, var2);
   }

   public final boolean cdlAbandonedBaby(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlAbandonedBaby(endIdx, endIdx, open, high, low, close, penetration, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlAbandonedBabyLookback(penetration) + previous;
         throw new InsufficientData("cdlAbandonedBaby", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlAbandonedBaby$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, double var5, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = 0.3;
      }

      if ((var8 & 32) != 0) {
         var7 = 0;
      }

      return var0.cdlAbandonedBaby(var1, var2, var3, var4, var5, var7);
   }

   public final boolean cdlAbandonedBaby(@NotNull PriceBarSeries serie, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlAbandonedBaby(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), penetration, previous);
   }

   // $FF: synthetic method
   public static boolean cdlAbandonedBaby$default(TaLib var0, PriceBarSeries var1, double var2, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 0.3;
      }

      if ((var5 & 4) != 0) {
         var4 = 0;
      }

      return var0.cdlAbandonedBaby(var1, var2, var4);
   }

   public final boolean cdlAdvanceBlock(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlAdvanceBlock(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlAdvanceBlockLookback() + previous;
         throw new InsufficientData("cdlAdvanceBlock", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlAdvanceBlock$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlAdvanceBlock(var1, var2, var3, var4, var5);
   }

   public final boolean cdlAdvanceBlock(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlAdvanceBlock(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlAdvanceBlock$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlAdvanceBlock(var1, var2);
   }

   public final boolean cdlBeltHold(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlBeltHold(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlBeltHoldLookback() + previous;
         throw new InsufficientData("cdlBeltHold", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlBeltHold$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlBeltHold(var1, var2, var3, var4, var5);
   }

   public final boolean cdlBeltHold(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlBeltHold(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlBeltHold$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlBeltHold(var1, var2);
   }

   public final boolean cdlBreakaway(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlBreakaway(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlBreakawayLookback() + previous;
         throw new InsufficientData("cdlBreakaway", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlBreakaway$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlBreakaway(var1, var2, var3, var4, var5);
   }

   public final boolean cdlBreakaway(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlBreakaway(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlBreakaway$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlBreakaway(var1, var2);
   }

   public final boolean cdlClosingMarubozu(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlClosingMarubozu(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlClosingMarubozuLookback() + previous;
         throw new InsufficientData("cdlClosingMarubozu", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlClosingMarubozu$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlClosingMarubozu(var1, var2, var3, var4, var5);
   }

   public final boolean cdlClosingMarubozu(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlClosingMarubozu(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlClosingMarubozu$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlClosingMarubozu(var1, var2);
   }

   public final boolean cdlConcealBabysWall(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlConcealBabysWall(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlConcealBabysWallLookback() + previous;
         throw new InsufficientData("cdlConcealBabysWall", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlConcealBabysWall$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlConcealBabysWall(var1, var2, var3, var4, var5);
   }

   public final boolean cdlConcealBabysWall(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlConcealBabysWall(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlConcealBabysWall$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlConcealBabysWall(var1, var2);
   }

   public final boolean cdlCounterAttack(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlCounterAttack(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlCounterAttackLookback() + previous;
         throw new InsufficientData("cdlCounterAttack", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlCounterAttack$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlCounterAttack(var1, var2, var3, var4, var5);
   }

   public final boolean cdlCounterAttack(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlCounterAttack(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlCounterAttack$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlCounterAttack(var1, var2);
   }

   public final boolean cdlDarkCloudCover(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlDarkCloudCover(endIdx, endIdx, open, high, low, close, penetration, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlDarkCloudCoverLookback(penetration) + previous;
         throw new InsufficientData("cdlDarkCloudCover", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlDarkCloudCover$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, double var5, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = (double)0.5F;
      }

      if ((var8 & 32) != 0) {
         var7 = 0;
      }

      return var0.cdlDarkCloudCover(var1, var2, var3, var4, var5, var7);
   }

   public final boolean cdlDarkCloudCover(@NotNull PriceBarSeries serie, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlDarkCloudCover(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), penetration, previous);
   }

   // $FF: synthetic method
   public static boolean cdlDarkCloudCover$default(TaLib var0, PriceBarSeries var1, double var2, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = (double)0.5F;
      }

      if ((var5 & 4) != 0) {
         var4 = 0;
      }

      return var0.cdlDarkCloudCover(var1, var2, var4);
   }

   public final boolean cdlDoji(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlDoji(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlDojiLookback() + previous;
         throw new InsufficientData("cdlDoji", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlDoji$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlDoji(var1, var2, var3, var4, var5);
   }

   public final boolean cdlDoji(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlDoji(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlDoji$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlDoji(var1, var2);
   }

   public final boolean cdlDojiStar(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlDojiStar(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlDojiStarLookback() + previous;
         throw new InsufficientData("cdlDojiStar", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlDojiStar$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlDojiStar(var1, var2, var3, var4, var5);
   }

   public final boolean cdlDojiStar(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlDojiStar(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlDojiStar$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlDojiStar(var1, var2);
   }

   public final boolean cdlDragonflyDoji(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlDragonflyDoji(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlDragonflyDojiLookback() + previous;
         throw new InsufficientData("cdlDragonflyDoji", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlDragonflyDoji$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlDragonflyDoji(var1, var2, var3, var4, var5);
   }

   public final boolean cdlDragonflyDoji(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlDragonflyDoji(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlDragonflyDoji$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlDragonflyDoji(var1, var2);
   }

   public final boolean cdlEngulfing(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlEngulfing(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlEngulfingLookback() + previous;
         throw new InsufficientData("cdlEngulfing", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlEngulfing$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlEngulfing(var1, var2, var3, var4, var5);
   }

   public final boolean cdlEngulfing(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlEngulfing(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlEngulfing$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlEngulfing(var1, var2);
   }

   public final boolean cdlEveningDojiStar(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlEveningDojiStar(endIdx, endIdx, open, high, low, close, penetration, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlEveningDojiStarLookback(penetration) + previous;
         throw new InsufficientData("cdlEveningDojiStar", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlEveningDojiStar$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, double var5, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = 0.3;
      }

      if ((var8 & 32) != 0) {
         var7 = 0;
      }

      return var0.cdlEveningDojiStar(var1, var2, var3, var4, var5, var7);
   }

   public final boolean cdlEveningDojiStar(@NotNull PriceBarSeries serie, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlEveningDojiStar(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), penetration, previous);
   }

   // $FF: synthetic method
   public static boolean cdlEveningDojiStar$default(TaLib var0, PriceBarSeries var1, double var2, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 0.3;
      }

      if ((var5 & 4) != 0) {
         var4 = 0;
      }

      return var0.cdlEveningDojiStar(var1, var2, var4);
   }

   public final boolean cdlEveningStar(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlEveningStar(endIdx, endIdx, open, high, low, close, penetration, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlEveningStarLookback(penetration) + previous;
         throw new InsufficientData("cdlEveningStar", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlEveningStar$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, double var5, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = 0.3;
      }

      if ((var8 & 32) != 0) {
         var7 = 0;
      }

      return var0.cdlEveningStar(var1, var2, var3, var4, var5, var7);
   }

   public final boolean cdlEveningStar(@NotNull PriceBarSeries serie, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlEveningStar(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), penetration, previous);
   }

   // $FF: synthetic method
   public static boolean cdlEveningStar$default(TaLib var0, PriceBarSeries var1, double var2, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 0.3;
      }

      if ((var5 & 4) != 0) {
         var4 = 0;
      }

      return var0.cdlEveningStar(var1, var2, var4);
   }

   public final boolean cdlGapSideSideWhite(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlGapSideSideWhite(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlGapSideSideWhiteLookback() + previous;
         throw new InsufficientData("cdlGapSideSideWhite", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlGapSideSideWhite$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlGapSideSideWhite(var1, var2, var3, var4, var5);
   }

   public final boolean cdlGapSideSideWhite(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlGapSideSideWhite(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlGapSideSideWhite$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlGapSideSideWhite(var1, var2);
   }

   public final boolean cdlGravestoneDoji(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlGravestoneDoji(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlGravestoneDojiLookback() + previous;
         throw new InsufficientData("cdlGravestoneDoji", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlGravestoneDoji$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlGravestoneDoji(var1, var2, var3, var4, var5);
   }

   public final boolean cdlGravestoneDoji(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlGravestoneDoji(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlGravestoneDoji$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlGravestoneDoji(var1, var2);
   }

   public final boolean cdlHammer(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHammer(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHammerLookback() + previous;
         throw new InsufficientData("cdlHammer", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHammer$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHammer(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHammer(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHammer(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHammer$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHammer(var1, var2);
   }

   public final boolean cdlHangingMan(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHangingMan(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHangingManLookback() + previous;
         throw new InsufficientData("cdlHangingMan", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHangingMan$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHangingMan(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHangingMan(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHangingMan(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHangingMan$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHangingMan(var1, var2);
   }

   public final boolean cdlHarami(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHarami(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHaramiLookback() + previous;
         throw new InsufficientData("cdlHarami", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHarami$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHarami(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHarami(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHarami(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHarami$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHarami(var1, var2);
   }

   public final boolean cdlHaramiCross(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHaramiCross(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHaramiCrossLookback() + previous;
         throw new InsufficientData("cdlHaramiCross", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHaramiCross$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHaramiCross(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHaramiCross(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHaramiCross(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHaramiCross$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHaramiCross(var1, var2);
   }

   public final boolean cdlHignWave(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHignWave(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHignWaveLookback() + previous;
         throw new InsufficientData("cdlHignWave", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHignWave$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHignWave(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHignWave(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHignWave(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHignWave$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHignWave(var1, var2);
   }

   public final boolean cdlHikkake(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHikkake(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHikkakeLookback() + previous;
         throw new InsufficientData("cdlHikkake", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHikkake$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHikkake(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHikkake(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHikkake(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHikkake$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHikkake(var1, var2);
   }

   public final boolean cdlHikkakeMod(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHikkakeMod(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHikkakeModLookback() + previous;
         throw new InsufficientData("cdlHikkakeMod", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHikkakeMod$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHikkakeMod(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHikkakeMod(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHikkakeMod(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHikkakeMod$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHikkakeMod(var1, var2);
   }

   public final boolean cdlHomingPigeon(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlHomingPigeon(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlHomingPigeonLookback() + previous;
         throw new InsufficientData("cdlHomingPigeon", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlHomingPigeon$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlHomingPigeon(var1, var2, var3, var4, var5);
   }

   public final boolean cdlHomingPigeon(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlHomingPigeon(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlHomingPigeon$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlHomingPigeon(var1, var2);
   }

   public final boolean cdlIdentical3Crows(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlIdentical3Crows(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlIdentical3CrowsLookback() + previous;
         throw new InsufficientData("cdlIdentical3Crows", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlIdentical3Crows$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlIdentical3Crows(var1, var2, var3, var4, var5);
   }

   public final boolean cdlIdentical3Crows(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlIdentical3Crows(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlIdentical3Crows$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlIdentical3Crows(var1, var2);
   }

   public final boolean cdlInNeck(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlInNeck(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlInNeckLookback() + previous;
         throw new InsufficientData("cdlInNeck", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlInNeck$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlInNeck(var1, var2, var3, var4, var5);
   }

   public final boolean cdlInNeck(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlInNeck(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlInNeck$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlInNeck(var1, var2);
   }

   public final boolean cdlInvertedHammer(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlInvertedHammer(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlInvertedHammerLookback() + previous;
         throw new InsufficientData("cdlInvertedHammer", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlInvertedHammer$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlInvertedHammer(var1, var2, var3, var4, var5);
   }

   public final boolean cdlInvertedHammer(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlInvertedHammer(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlInvertedHammer$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlInvertedHammer(var1, var2);
   }

   public final boolean cdlKicking(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlKicking(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlKickingLookback() + previous;
         throw new InsufficientData("cdlKicking", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlKicking$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlKicking(var1, var2, var3, var4, var5);
   }

   public final boolean cdlKicking(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlKicking(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlKicking$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlKicking(var1, var2);
   }

   public final boolean cdlKickingByLength(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlKickingByLength(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlKickingByLengthLookback() + previous;
         throw new InsufficientData("cdlKickingByLength", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlKickingByLength$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlKickingByLength(var1, var2, var3, var4, var5);
   }

   public final boolean cdlKickingByLength(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlKickingByLength(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlKickingByLength$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlKickingByLength(var1, var2);
   }

   public final boolean cdlLadderBottom(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlLadderBottom(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlLadderBottomLookback() + previous;
         throw new InsufficientData("cdlLadderBottom", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlLadderBottom$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlLadderBottom(var1, var2, var3, var4, var5);
   }

   public final boolean cdlLadderBottom(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlLadderBottom(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlLadderBottom$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlLadderBottom(var1, var2);
   }

   public final boolean cdlLongLeggedDoji(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlLongLeggedDoji(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlLongLeggedDojiLookback() + previous;
         throw new InsufficientData("cdlLongLeggedDoji", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlLongLeggedDoji$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlLongLeggedDoji(var1, var2, var3, var4, var5);
   }

   public final boolean cdlLongLeggedDoji(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlLongLeggedDoji(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlLongLeggedDoji$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlLongLeggedDoji(var1, var2);
   }

   public final boolean cdlLongLine(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlLongLine(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlLongLineLookback() + previous;
         throw new InsufficientData("cdlLongLine", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlLongLine$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlLongLine(var1, var2, var3, var4, var5);
   }

   public final boolean cdlLongLine(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlLongLine(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlLongLine$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlLongLine(var1, var2);
   }

   public final boolean cdlMarubozu(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlMarubozu(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlMarubozuLookback() + previous;
         throw new InsufficientData("cdlMarubozu", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlMarubozu$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlMarubozu(var1, var2, var3, var4, var5);
   }

   public final boolean cdlMarubozu(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlMarubozu(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlMarubozu$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlMarubozu(var1, var2);
   }

   public final boolean cdlMatchingLow(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlMatchingLow(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlMatchingLowLookback() + previous;
         throw new InsufficientData("cdlMatchingLow", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlMatchingLow$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlMatchingLow(var1, var2, var3, var4, var5);
   }

   public final boolean cdlMatchingLow(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlMatchingLow(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlMatchingLow$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlMatchingLow(var1, var2);
   }

   public final boolean cdlMatHold(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlMatHold(endIdx, endIdx, open, high, low, close, penetration, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlMatHoldLookback(penetration) + previous;
         throw new InsufficientData("cdlMatHold", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlMatHold$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, double var5, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = (double)0.5F;
      }

      if ((var8 & 32) != 0) {
         var7 = 0;
      }

      return var0.cdlMatHold(var1, var2, var3, var4, var5, var7);
   }

   public final boolean cdlMatHold(@NotNull PriceBarSeries serie, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlMatHold(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), penetration, previous);
   }

   // $FF: synthetic method
   public static boolean cdlMatHold$default(TaLib var0, PriceBarSeries var1, double var2, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = (double)0.5F;
      }

      if ((var5 & 4) != 0) {
         var4 = 0;
      }

      return var0.cdlMatHold(var1, var2, var4);
   }

   public final boolean cdlMorningDojiStar(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlMorningDojiStar(endIdx, endIdx, open, high, low, close, penetration, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlMorningDojiStarLookback(penetration) + previous;
         throw new InsufficientData("cdlMorningDojiStar", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlMorningDojiStar$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, double var5, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = 0.3;
      }

      if ((var8 & 32) != 0) {
         var7 = 0;
      }

      return var0.cdlMorningDojiStar(var1, var2, var3, var4, var5, var7);
   }

   public final boolean cdlMorningDojiStar(@NotNull PriceBarSeries serie, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlMorningDojiStar(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), penetration, previous);
   }

   // $FF: synthetic method
   public static boolean cdlMorningDojiStar$default(TaLib var0, PriceBarSeries var1, double var2, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 0.3;
      }

      if ((var5 & 4) != 0) {
         var4 = 0;
      }

      return var0.cdlMorningDojiStar(var1, var2, var4);
   }

   public final boolean cdlMorningStar(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlMorningStar(endIdx, endIdx, open, high, low, close, penetration, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlMorningStarLookback(penetration) + previous;
         throw new InsufficientData("cdlMorningStar", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlMorningStar$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, double var5, int var7, int var8, Object var9) {
      if ((var8 & 16) != 0) {
         var5 = 0.3;
      }

      if ((var8 & 32) != 0) {
         var7 = 0;
      }

      return var0.cdlMorningStar(var1, var2, var3, var4, var5, var7);
   }

   public final boolean cdlMorningStar(@NotNull PriceBarSeries serie, double penetration, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlMorningStar(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), penetration, previous);
   }

   // $FF: synthetic method
   public static boolean cdlMorningStar$default(TaLib var0, PriceBarSeries var1, double var2, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 0.3;
      }

      if ((var5 & 4) != 0) {
         var4 = 0;
      }

      return var0.cdlMorningStar(var1, var2, var4);
   }

   public final boolean cdlOnNeck(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlOnNeck(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlOnNeckLookback() + previous;
         throw new InsufficientData("cdlOnNeck", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlOnNeck$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlOnNeck(var1, var2, var3, var4, var5);
   }

   public final boolean cdlOnNeck(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlOnNeck(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlOnNeck$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlOnNeck(var1, var2);
   }

   public final boolean cdlPiercing(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlPiercing(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlPiercingLookback() + previous;
         throw new InsufficientData("cdlPiercing", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlPiercing$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlPiercing(var1, var2, var3, var4, var5);
   }

   public final boolean cdlPiercing(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlPiercing(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlPiercing$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlPiercing(var1, var2);
   }

   public final boolean cdlRickshawMan(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlRickshawMan(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlRickshawManLookback() + previous;
         throw new InsufficientData("cdlRickshawMan", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlRickshawMan$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlRickshawMan(var1, var2, var3, var4, var5);
   }

   public final boolean cdlRickshawMan(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlRickshawMan(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlRickshawMan$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlRickshawMan(var1, var2);
   }

   public final boolean cdlRiseFall3Methods(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlRiseFall3Methods(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlRiseFall3MethodsLookback() + previous;
         throw new InsufficientData("cdlRiseFall3Methods", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlRiseFall3Methods$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlRiseFall3Methods(var1, var2, var3, var4, var5);
   }

   public final boolean cdlRiseFall3Methods(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlRiseFall3Methods(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlRiseFall3Methods$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlRiseFall3Methods(var1, var2);
   }

   public final boolean cdlSeperatingLines(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlSeperatingLines(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlSeperatingLinesLookback() + previous;
         throw new InsufficientData("cdlSeperatingLines", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlSeperatingLines$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlSeperatingLines(var1, var2, var3, var4, var5);
   }

   public final boolean cdlSeperatingLines(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlSeperatingLines(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlSeperatingLines$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlSeperatingLines(var1, var2);
   }

   public final boolean cdlShootingStar(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlShootingStar(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlShootingStarLookback() + previous;
         throw new InsufficientData("cdlShootingStar", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlShootingStar$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlShootingStar(var1, var2, var3, var4, var5);
   }

   public final boolean cdlShootingStar(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlShootingStar(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlShootingStar$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlShootingStar(var1, var2);
   }

   public final boolean cdlShortLine(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlShortLine(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlShortLineLookback() + previous;
         throw new InsufficientData("cdlShortLine", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlShortLine$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlShortLine(var1, var2, var3, var4, var5);
   }

   public final boolean cdlShortLine(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlShortLine(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlShortLine$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlShortLine(var1, var2);
   }

   public final boolean cdlSpinningTop(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlSpinningTop(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlSpinningTopLookback() + previous;
         throw new InsufficientData("cdlSpinningTop", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlSpinningTop$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlSpinningTop(var1, var2, var3, var4, var5);
   }

   public final boolean cdlSpinningTop(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlSpinningTop(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlSpinningTop$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlSpinningTop(var1, var2);
   }

   public final boolean cdlStalledPattern(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlStalledPattern(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlStalledPatternLookback() + previous;
         throw new InsufficientData("cdlStalledPattern", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlStalledPattern$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlStalledPattern(var1, var2, var3, var4, var5);
   }

   public final boolean cdlStalledPattern(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlStalledPattern(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlStalledPattern$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlStalledPattern(var1, var2);
   }

   public final boolean cdlStickSandwich(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlStickSandwhich(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlStickSandwhichLookback() + previous;
         throw new InsufficientData("cdlStickSandwich", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlStickSandwich$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlStickSandwich(var1, var2, var3, var4, var5);
   }

   public final boolean cdlStickSandwich(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlStickSandwich(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlStickSandwich$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlStickSandwich(var1, var2);
   }

   public final boolean cdlTakuri(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlTakuri(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlTakuriLookback() + previous;
         throw new InsufficientData("cdlTakuri", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlTakuri$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlTakuri(var1, var2, var3, var4, var5);
   }

   public final boolean cdlTakuri(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlTakuri(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlTakuri$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlTakuri(var1, var2);
   }

   public final boolean cdlTasukiGap(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlTasukiGap(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlTasukiGapLookback() + previous;
         throw new InsufficientData("cdlTasukiGap", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlTasukiGap$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlTasukiGap(var1, var2, var3, var4, var5);
   }

   public final boolean cdlTasukiGap(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlTasukiGap(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlTasukiGap$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlTasukiGap(var1, var2);
   }

   public final boolean cdlThrusting(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlThrusting(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlThrustingLookback() + previous;
         throw new InsufficientData("cdlThrusting", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlThrusting$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlThrusting(var1, var2, var3, var4, var5);
   }

   public final boolean cdlThrusting(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlThrusting(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlThrusting$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlThrusting(var1, var2);
   }

   public final boolean cdlTristar(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlTristar(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlTristarLookback() + previous;
         throw new InsufficientData("cdlTristar", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlTristar$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlTristar(var1, var2, var3, var4, var5);
   }

   public final boolean cdlTristar(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlTristar(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlTristar$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlTristar(var1, var2);
   }

   public final boolean cdlUnique3River(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlUnique3River(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlUnique3RiverLookback() + previous;
         throw new InsufficientData("cdlUnique3River", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlUnique3River$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlUnique3River(var1, var2, var3, var4, var5);
   }

   public final boolean cdlUnique3River(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlUnique3River(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlUnique3River$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlUnique3River(var1, var2);
   }

   public final boolean cdlUpsideGap2Crows(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlUpsideGap2Crows(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlUpsideGap2CrowsLookback() + previous;
         throw new InsufficientData("cdlUpsideGap2Crows", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlUpsideGap2Crows$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlUpsideGap2Crows(var1, var2, var3, var4, var5);
   }

   public final boolean cdlUpsideGap2Crows(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlUpsideGap2Crows(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlUpsideGap2Crows$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlUpsideGap2Crows(var1, var2);
   }

   public final boolean cdlXSideGap3Methods(@NotNull double[] open, @NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(open, "open");
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(open) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cdlXSideGap3Methods(endIdx, endIdx, open, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cdlXSideGap3MethodsLookback() + previous;
         throw new InsufficientData("cdlXSideGap3Methods", lookback + 1);
      } else {
         return output1[0] != 0;
      }
   }

   // $FF: synthetic method
   public static boolean cdlXSideGap3Methods$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, Object var7) {
      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.cdlXSideGap3Methods(var1, var2, var3, var4, var5);
   }

   public final boolean cdlXSideGap3Methods(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cdlXSideGap3Methods(serie.getOpen(), serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static boolean cdlXSideGap3Methods$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cdlXSideGap3Methods(var1, var2);
   }

   public final double ceil(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.ceil(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.ceilLookback() + previous;
         throw new InsufficientData("ceil", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double ceil$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.ceil(var1, var2);
   }

   public final double ceil(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.ceil(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double ceil$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.ceil(var1, var2);
   }

   public final double cmo(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cmo(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cmoLookback(timePeriod) + previous;
         throw new InsufficientData("cmo", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double cmo$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.cmo(var1, var2, var3);
   }

   public final double cmo(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cmo(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double cmo$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.cmo(var1, var2, var3);
   }

   public final double correl(@NotNull double[] data0, @NotNull double[] data1, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data0, "data0");
      Intrinsics.checkNotNullParameter(data1, "data1");
      int endIdx = ArraysKt.getLastIndex(data0) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.correl(endIdx, endIdx, data0, data1, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.correlLookback(timePeriod) + previous;
         throw new InsufficientData("correl", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double correl$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 4) != 0) {
         var3 = 30;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.correl(var1, var2, var3, var4);
   }

   public final double cos(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cos(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.cosLookback() + previous;
         throw new InsufficientData("cos", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double cos$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cos(var1, var2);
   }

   public final double cos(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cos(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double cos$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cos(var1, var2);
   }

   public final double cosh(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.cosh(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.coshLookback() + previous;
         throw new InsufficientData("cosh", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double cosh$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cosh(var1, var2);
   }

   public final double cosh(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.cosh(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double cosh$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.cosh(var1, var2);
   }

   public final double dema(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.dema(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.demaLookback(timePeriod) + previous;
         throw new InsufficientData("dema", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double dema$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.dema(var1, var2, var3);
   }

   public final double dema(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.dema(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double dema$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.dema(var1, var2, var3);
   }

   public final double div(@NotNull double[] data0, @NotNull double[] data1, int previous) {
      Intrinsics.checkNotNullParameter(data0, "data0");
      Intrinsics.checkNotNullParameter(data1, "data1");
      int endIdx = ArraysKt.getLastIndex(data0) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.div(endIdx, endIdx, data0, data1, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.divLookback() + previous;
         throw new InsufficientData("div", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double div$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, Object var5) {
      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.div(var1, var2, var3);
   }

   public final double dx(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.dx(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.dxLookback(timePeriod) + previous;
         throw new InsufficientData("dx", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double dx$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.dx(var1, var2, var3, var4, var5);
   }

   public final double dx(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.dx(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double dx$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.dx(var1, var2, var3);
   }

   public final double ema(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.ema(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.emaLookback(timePeriod) + previous;
         throw new InsufficientData("ema", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double ema$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.ema(var1, var2, var3);
   }

   public final double ema(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.ema(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double ema$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.ema(var1, var2, var3);
   }

   public final double exp(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.exp(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.expLookback() + previous;
         throw new InsufficientData("exp", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double exp$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.exp(var1, var2);
   }

   public final double exp(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.exp(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double exp$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.exp(var1, var2);
   }

   public final double floor(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.floor(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.floorLookback() + previous;
         throw new InsufficientData("floor", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double floor$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.floor(var1, var2);
   }

   public final double floor(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.floor(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double floor$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.floor(var1, var2);
   }

   public final double htDcPeriod(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.htDcPeriod(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.htDcPeriodLookback() + previous;
         throw new InsufficientData("htDcPeriod", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double htDcPeriod$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htDcPeriod(var1, var2);
   }

   public final double htDcPeriod(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.htDcPeriod(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double htDcPeriod$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htDcPeriod(var1, var2);
   }

   public final double htDcPhase(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.htDcPhase(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.htDcPhaseLookback() + previous;
         throw new InsufficientData("htDcPhase", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double htDcPhase$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htDcPhase(var1, var2);
   }

   public final double htDcPhase(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.htDcPhase(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double htDcPhase$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htDcPhase(var1, var2);
   }

   @NotNull
   public final Pair htPhasor(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.htPhasor(endIdx, endIdx, data, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.htPhasorLookback() + previous;
         throw new InsufficientData("htPhasor", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair htPhasor$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htPhasor(var1, var2);
   }

   @NotNull
   public final Pair htPhasor(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.htPhasor(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static Pair htPhasor$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htPhasor(var1, var2);
   }

   @NotNull
   public final Pair htSine(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.htSine(endIdx, endIdx, data, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.htSineLookback() + previous;
         throw new InsufficientData("htSine", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair htSine$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htSine(var1, var2);
   }

   @NotNull
   public final Pair htSine(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.htSine(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static Pair htSine$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htSine(var1, var2);
   }

   public final double htTrendline(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.htTrendline(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.htTrendlineLookback() + previous;
         throw new InsufficientData("htTrendline", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double htTrendline$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htTrendline(var1, var2);
   }

   public final double htTrendline(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.htTrendline(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double htTrendline$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htTrendline(var1, var2);
   }

   public final int htTrendMode(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.htTrendMode(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.htTrendModeLookback() + previous;
         throw new InsufficientData("htTrendMode", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static int htTrendMode$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htTrendMode(var1, var2);
   }

   public final int htTrendMode(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.htTrendMode(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static int htTrendMode$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.htTrendMode(var1, var2);
   }

   public final double kama(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.kama(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.kamaLookback(timePeriod) + previous;
         throw new InsufficientData("kama", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double kama$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.kama(var1, var2, var3);
   }

   public final double kama(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.kama(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double kama$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.kama(var1, var2, var3);
   }

   public final double linearReg(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.linearReg(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.linearRegLookback(timePeriod) + previous;
         throw new InsufficientData("linearReg", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double linearReg$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearReg(var1, var2, var3);
   }

   public final double linearReg(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.linearReg(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double linearReg$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearReg(var1, var2, var3);
   }

   public final double linearRegAngle(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.linearRegAngle(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.linearRegAngleLookback(timePeriod) + previous;
         throw new InsufficientData("linearRegAngle", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double linearRegAngle$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearRegAngle(var1, var2, var3);
   }

   public final double linearRegAngle(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.linearRegAngle(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double linearRegAngle$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearRegAngle(var1, var2, var3);
   }

   public final double linearRegIntercept(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.linearRegIntercept(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.linearRegInterceptLookback(timePeriod) + previous;
         throw new InsufficientData("linearRegIntercept", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double linearRegIntercept$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearRegIntercept(var1, var2, var3);
   }

   public final double linearRegIntercept(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.linearRegIntercept(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double linearRegIntercept$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearRegIntercept(var1, var2, var3);
   }

   public final double linearRegSlope(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.linearRegSlope(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.linearRegSlopeLookback(timePeriod) + previous;
         throw new InsufficientData("linearRegSlope", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double linearRegSlope$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearRegSlope(var1, var2, var3);
   }

   public final double linearRegSlope(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.linearRegSlope(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double linearRegSlope$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.linearRegSlope(var1, var2, var3);
   }

   public final double ln(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.ln(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.lnLookback() + previous;
         throw new InsufficientData("ln", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double ln$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.ln(var1, var2);
   }

   public final double ln(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.ln(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double ln$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.ln(var1, var2);
   }

   public final double log10(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.log10(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.log10Lookback() + previous;
         throw new InsufficientData("log10", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double log10$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.log10(var1, var2);
   }

   public final double log10(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.log10(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double log10$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.log10(var1, var2);
   }

   public final double movingAverage(@NotNull double[] data, int timePeriod, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.movingAverage(endIdx, endIdx, data, timePeriod, mAType, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.movingAverageLookback(timePeriod, mAType) + previous;
         throw new InsufficientData("movingAverage", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double movingAverage$default(TaLib var0, double[] var1, int var2, MAType var3, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 30;
      }

      if ((var5 & 4) != 0) {
         var3 = MAType.Ema;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.movingAverage(var1, var2, var3, var4);
   }

   public final double movingAverage(@NotNull PriceBarSeries serie, int timePeriod, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      return this.movingAverage(serie.getClose(), timePeriod, mAType, previous);
   }

   // $FF: synthetic method
   public static double movingAverage$default(TaLib var0, PriceBarSeries var1, int var2, MAType var3, int var4, int var5, Object var6) {
      if ((var5 & 2) != 0) {
         var2 = 30;
      }

      if ((var5 & 4) != 0) {
         var3 = MAType.Ema;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.movingAverage(var1, var2, var3, var4);
   }

   @NotNull
   public final Triple macd(@NotNull double[] data, int fastPeriod, int slowPeriod, int signalPeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      double[] output3 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.macd(endIdx, endIdx, data, fastPeriod, slowPeriod, signalPeriod, startOutput, endOutput, output1, output2, output3);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.macdLookback(fastPeriod, slowPeriod, signalPeriod) + previous;
         throw new InsufficientData("macd", lookback + 1);
      } else {
         return new Triple(output1[0], output2[0], output3[0]);
      }
   }

   // $FF: synthetic method
   public static Triple macd$default(TaLib var0, double[] var1, int var2, int var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 12;
      }

      if ((var6 & 4) != 0) {
         var3 = 26;
      }

      if ((var6 & 8) != 0) {
         var4 = 9;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.macd(var1, var2, var3, var4, var5);
   }

   @NotNull
   public final Triple macd(@NotNull PriceBarSeries serie, int fastPeriod, int slowPeriod, int signalPeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.macd(serie.getClose(), fastPeriod, slowPeriod, signalPeriod, previous);
   }

   // $FF: synthetic method
   public static Triple macd$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 12;
      }

      if ((var6 & 4) != 0) {
         var3 = 26;
      }

      if ((var6 & 8) != 0) {
         var4 = 9;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.macd(var1, var2, var3, var4, var5);
   }

   @NotNull
   public final Triple macdExt(@NotNull double[] data, int fastPeriod, @NotNull MAType fastMA, int slowPeriod, @NotNull MAType slowMA, int signalPeriod, @NotNull MAType signalMA, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(fastMA, "fastMA");
      Intrinsics.checkNotNullParameter(slowMA, "slowMA");
      Intrinsics.checkNotNullParameter(signalMA, "signalMA");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      double[] output3 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.macdExt(endIdx, endIdx, data, fastPeriod, fastMA, slowPeriod, slowMA, signalPeriod, signalMA, startOutput, endOutput, output1, output2, output3);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.macdExtLookback(fastPeriod, fastMA, slowPeriod, slowMA, signalPeriod, signalMA) + previous;
         throw new InsufficientData("macdExt", lookback + 1);
      } else {
         return new Triple(output1[0], output2[0], output3[0]);
      }
   }

   // $FF: synthetic method
   public static Triple macdExt$default(TaLib var0, double[] var1, int var2, MAType var3, int var4, MAType var5, int var6, MAType var7, int var8, int var9, Object var10) {
      if ((var9 & 2) != 0) {
         var2 = 12;
      }

      if ((var9 & 4) != 0) {
         var3 = MAType.Ema;
      }

      if ((var9 & 8) != 0) {
         var4 = 26;
      }

      if ((var9 & 16) != 0) {
         var5 = MAType.Ema;
      }

      if ((var9 & 32) != 0) {
         var6 = 9;
      }

      if ((var9 & 64) != 0) {
         var7 = MAType.Ema;
      }

      if ((var9 & 128) != 0) {
         var8 = 0;
      }

      return var0.macdExt(var1, var2, var3, var4, var5, var6, var7, var8);
   }

   @NotNull
   public final Triple macdExt(@NotNull PriceBarSeries serie, int fastPeriod, @NotNull MAType fastMA, int slowPeriod, @NotNull MAType slowMA, int signalPeriod, @NotNull MAType signalMA, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(fastMA, "fastMA");
      Intrinsics.checkNotNullParameter(slowMA, "slowMA");
      Intrinsics.checkNotNullParameter(signalMA, "signalMA");
      return this.macdExt(serie.getClose(), fastPeriod, fastMA, slowPeriod, slowMA, signalPeriod, signalMA, previous);
   }

   // $FF: synthetic method
   public static Triple macdExt$default(TaLib var0, PriceBarSeries var1, int var2, MAType var3, int var4, MAType var5, int var6, MAType var7, int var8, int var9, Object var10) {
      if ((var9 & 2) != 0) {
         var2 = 12;
      }

      if ((var9 & 4) != 0) {
         var3 = MAType.Ema;
      }

      if ((var9 & 8) != 0) {
         var4 = 26;
      }

      if ((var9 & 16) != 0) {
         var5 = MAType.Ema;
      }

      if ((var9 & 32) != 0) {
         var6 = 9;
      }

      if ((var9 & 64) != 0) {
         var7 = MAType.Ema;
      }

      if ((var9 & 128) != 0) {
         var8 = 0;
      }

      return var0.macdExt(var1, var2, var3, var4, var5, var6, var7, var8);
   }

   @NotNull
   public final Triple macdFix(@NotNull double[] data, int signalPeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      double[] output3 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.macdFix(endIdx, endIdx, data, signalPeriod, startOutput, endOutput, output1, output2, output3);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.macdFixLookback(signalPeriod) + previous;
         throw new InsufficientData("macdFix", lookback + 1);
      } else {
         return new Triple(output1[0], output2[0], output3[0]);
      }
   }

   // $FF: synthetic method
   public static Triple macdFix$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 9;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.macdFix(var1, var2, var3);
   }

   @NotNull
   public final Triple macdFix(@NotNull PriceBarSeries serie, int signalPeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.macdFix(serie.getClose(), signalPeriod, previous);
   }

   // $FF: synthetic method
   public static Triple macdFix$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 9;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.macdFix(var1, var2, var3);
   }

   @NotNull
   public final Pair mama(@NotNull double[] data, double fastLimit, double slowLimit, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.mama(endIdx, endIdx, data, fastLimit, slowLimit, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.mamaLookback(fastLimit, slowLimit) + previous;
         throw new InsufficientData("mama", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair mama$default(TaLib var0, double[] var1, double var2, double var4, int var6, int var7, Object var8) {
      if ((var7 & 2) != 0) {
         var2 = (double)0.5F;
      }

      if ((var7 & 4) != 0) {
         var4 = 0.05;
      }

      if ((var7 & 8) != 0) {
         var6 = 0;
      }

      return var0.mama(var1, var2, var4, var6);
   }

   @NotNull
   public final Pair mama(@NotNull PriceBarSeries serie, double fastLimit, double slowLimit, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.mama(serie.getClose(), fastLimit, slowLimit, previous);
   }

   // $FF: synthetic method
   public static Pair mama$default(TaLib var0, PriceBarSeries var1, double var2, double var4, int var6, int var7, Object var8) {
      if ((var7 & 2) != 0) {
         var2 = (double)0.5F;
      }

      if ((var7 & 4) != 0) {
         var4 = 0.05;
      }

      if ((var7 & 8) != 0) {
         var6 = 0;
      }

      return var0.mama(var1, var2, var4, var6);
   }

   public final double movingAverageVariablePeriod(@NotNull double[] data, @NotNull double[] inPeriods, int minimumPeriod, int maximumPeriod, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(inPeriods, "inPeriods");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.movingAverageVariablePeriod(endIdx, endIdx, data, inPeriods, minimumPeriod, maximumPeriod, mAType, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.movingAverageVariablePeriodLookback(minimumPeriod, maximumPeriod, mAType) + previous;
         throw new InsufficientData("movingAverageVariablePeriod", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double movingAverageVariablePeriod$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, MAType var5, int var6, int var7, Object var8) {
      if ((var7 & 4) != 0) {
         var3 = 2;
      }

      if ((var7 & 8) != 0) {
         var4 = 30;
      }

      if ((var7 & 16) != 0) {
         var5 = MAType.Ema;
      }

      if ((var7 & 32) != 0) {
         var6 = 0;
      }

      return var0.movingAverageVariablePeriod(var1, var2, var3, var4, var5, var6);
   }

   public final double max(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.max(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.maxLookback(timePeriod) + previous;
         throw new InsufficientData("max", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double max$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.max(var1, var2, var3);
   }

   public final double max(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.max(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double max$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.max(var1, var2, var3);
   }

   public final int maxIndex(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.maxIndex(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.maxIndexLookback(timePeriod) + previous;
         throw new InsufficientData("maxIndex", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static int maxIndex$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.maxIndex(var1, var2, var3);
   }

   public final int maxIndex(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.maxIndex(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static int maxIndex$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.maxIndex(var1, var2, var3);
   }

   public final double medPrice(@NotNull double[] high, @NotNull double[] low, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.medPrice(endIdx, endIdx, high, low, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.medPriceLookback() + previous;
         throw new InsufficientData("medPrice", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double medPrice$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, Object var5) {
      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.medPrice(var1, var2, var3);
   }

   public final double medPrice(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.medPrice(serie.getHigh(), serie.getLow(), previous);
   }

   // $FF: synthetic method
   public static double medPrice$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.medPrice(var1, var2);
   }

   public final double mfi(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, @NotNull double[] volume, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      Intrinsics.checkNotNullParameter(volume, "volume");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.mfi(endIdx, endIdx, high, low, close, volume, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.mfiLookback(timePeriod) + previous;
         throw new InsufficientData("mfi", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double mfi$default(TaLib var0, double[] var1, double[] var2, double[] var3, double[] var4, int var5, int var6, int var7, Object var8) {
      if ((var7 & 16) != 0) {
         var5 = 14;
      }

      if ((var7 & 32) != 0) {
         var6 = 0;
      }

      return var0.mfi(var1, var2, var3, var4, var5, var6);
   }

   public final double mfi(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.mfi(serie.getHigh(), serie.getLow(), serie.getClose(), serie.getVolume(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double mfi$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.mfi(var1, var2, var3);
   }

   public final double midPoint(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.midPoint(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.midPointLookback(timePeriod) + previous;
         throw new InsufficientData("midPoint", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double midPoint$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.midPoint(var1, var2, var3);
   }

   public final double midPoint(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.midPoint(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double midPoint$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.midPoint(var1, var2, var3);
   }

   public final double midPrice(@NotNull double[] high, @NotNull double[] low, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.midPrice(endIdx, endIdx, high, low, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.midPriceLookback(timePeriod) + previous;
         throw new InsufficientData("midPrice", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double midPrice$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 4) != 0) {
         var3 = 14;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.midPrice(var1, var2, var3, var4);
   }

   public final double midPrice(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.midPrice(serie.getHigh(), serie.getLow(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double midPrice$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.midPrice(var1, var2, var3);
   }

   public final double min(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.min(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.minLookback(timePeriod) + previous;
         throw new InsufficientData("min", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double min$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.min(var1, var2, var3);
   }

   public final double min(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.min(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double min$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.min(var1, var2, var3);
   }

   public final int minIndex(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      int[] output1 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.minIndex(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.minIndexLookback(timePeriod) + previous;
         throw new InsufficientData("minIndex", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static int minIndex$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minIndex(var1, var2, var3);
   }

   public final int minIndex(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.minIndex(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static int minIndex$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minIndex(var1, var2, var3);
   }

   @NotNull
   public final Pair minMax(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.minMax(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.minMaxLookback(timePeriod) + previous;
         throw new InsufficientData("minMax", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair minMax$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minMax(var1, var2, var3);
   }

   @NotNull
   public final Pair minMax(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.minMax(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static Pair minMax$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minMax(var1, var2, var3);
   }

   @NotNull
   public final Pair minMaxIndex(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      int[] output1 = new int[1];
      int[] output2 = new int[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.minMaxIndex(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.minMaxIndexLookback(timePeriod) + previous;
         throw new InsufficientData("minMaxIndex", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair minMaxIndex$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minMaxIndex(var1, var2, var3);
   }

   @NotNull
   public final Pair minMaxIndex(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.minMaxIndex(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static Pair minMaxIndex$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minMaxIndex(var1, var2, var3);
   }

   public final double minusDI(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.minusDI(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.minusDILookback(timePeriod) + previous;
         throw new InsufficientData("minusDI", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double minusDI$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.minusDI(var1, var2, var3, var4, var5);
   }

   public final double minusDI(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.minusDI(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double minusDI$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minusDI(var1, var2, var3);
   }

   public final double minusDM(@NotNull double[] high, @NotNull double[] low, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.minusDM(endIdx, endIdx, high, low, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.minusDMLookback(timePeriod) + previous;
         throw new InsufficientData("minusDM", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double minusDM$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 4) != 0) {
         var3 = 14;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.minusDM(var1, var2, var3, var4);
   }

   public final double minusDM(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.minusDM(serie.getHigh(), serie.getLow(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double minusDM$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.minusDM(var1, var2, var3);
   }

   public final double mom(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.mom(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.momLookback(timePeriod) + previous;
         throw new InsufficientData("mom", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double mom$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.mom(var1, var2, var3);
   }

   public final double mom(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.mom(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double mom$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.mom(var1, var2, var3);
   }

   public final double mult(@NotNull double[] data0, @NotNull double[] data1, int previous) {
      Intrinsics.checkNotNullParameter(data0, "data0");
      Intrinsics.checkNotNullParameter(data1, "data1");
      int endIdx = ArraysKt.getLastIndex(data0) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.mult(endIdx, endIdx, data0, data1, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.multLookback() + previous;
         throw new InsufficientData("mult", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double mult$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, Object var5) {
      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.mult(var1, var2, var3);
   }

   public final double natr(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.natr(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.natrLookback(timePeriod) + previous;
         throw new InsufficientData("natr", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double natr$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.natr(var1, var2, var3, var4, var5);
   }

   public final double natr(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.natr(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double natr$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.natr(var1, var2, var3);
   }

   public final double obv(@NotNull double[] data, @NotNull double[] volume, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(volume, "volume");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.obv(endIdx, endIdx, data, volume, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.obvLookback() + previous;
         throw new InsufficientData("obv", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double obv$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, Object var5) {
      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.obv(var1, var2, var3);
   }

   public final double plusDI(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.plusDI(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.plusDILookback(timePeriod) + previous;
         throw new InsufficientData("plusDI", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double plusDI$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.plusDI(var1, var2, var3, var4, var5);
   }

   public final double plusDI(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.plusDI(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double plusDI$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.plusDI(var1, var2, var3);
   }

   public final double plusDM(@NotNull double[] high, @NotNull double[] low, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.plusDM(endIdx, endIdx, high, low, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.plusDMLookback(timePeriod) + previous;
         throw new InsufficientData("plusDM", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double plusDM$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, int var5, Object var6) {
      if ((var5 & 4) != 0) {
         var3 = 14;
      }

      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.plusDM(var1, var2, var3, var4);
   }

   public final double plusDM(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.plusDM(serie.getHigh(), serie.getLow(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double plusDM$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.plusDM(var1, var2, var3);
   }

   public final double ppo(@NotNull double[] data, int fastPeriod, int slowPeriod, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.ppo(endIdx, endIdx, data, fastPeriod, slowPeriod, mAType, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.ppoLookback(fastPeriod, slowPeriod, mAType) + previous;
         throw new InsufficientData("ppo", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double ppo$default(TaLib var0, double[] var1, int var2, int var3, MAType var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 12;
      }

      if ((var6 & 4) != 0) {
         var3 = 26;
      }

      if ((var6 & 8) != 0) {
         var4 = MAType.Ema;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.ppo(var1, var2, var3, var4, var5);
   }

   public final double ppo(@NotNull PriceBarSeries serie, int fastPeriod, int slowPeriod, @NotNull MAType mAType, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(mAType, "mAType");
      return this.ppo(serie.getClose(), fastPeriod, slowPeriod, mAType, previous);
   }

   // $FF: synthetic method
   public static double ppo$default(TaLib var0, PriceBarSeries var1, int var2, int var3, MAType var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 12;
      }

      if ((var6 & 4) != 0) {
         var3 = 26;
      }

      if ((var6 & 8) != 0) {
         var4 = MAType.Ema;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.ppo(var1, var2, var3, var4, var5);
   }

   public final double roc(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.roc(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.rocLookback(timePeriod) + previous;
         throw new InsufficientData("roc", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double roc$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.roc(var1, var2, var3);
   }

   public final double roc(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.roc(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double roc$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.roc(var1, var2, var3);
   }

   public final double rocP(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.rocP(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.rocPLookback(timePeriod) + previous;
         throw new InsufficientData("rocP", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double rocP$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rocP(var1, var2, var3);
   }

   public final double rocP(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.rocP(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double rocP$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rocP(var1, var2, var3);
   }

   public final double rocR(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.rocR(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.rocRLookback(timePeriod) + previous;
         throw new InsufficientData("rocR", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double rocR$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rocR(var1, var2, var3);
   }

   public final double rocR(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.rocR(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double rocR$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rocR(var1, var2, var3);
   }

   public final double rocR100(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.rocR100(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.rocR100Lookback(timePeriod) + previous;
         throw new InsufficientData("rocR100", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double rocR100$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rocR100(var1, var2, var3);
   }

   public final double rocR100(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.rocR100(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double rocR100$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 10;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rocR100(var1, var2, var3);
   }

   public final double rsi(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.rsi(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.rsiLookback(timePeriod) + previous;
         throw new InsufficientData("rsi", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double rsi$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rsi(var1, var2, var3);
   }

   public final double rsi(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.rsi(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double rsi$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.rsi(var1, var2, var3);
   }

   public final double sar(@NotNull double[] high, @NotNull double[] low, double accelerationFactor, double aFMaximum, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sar(endIdx, endIdx, high, low, accelerationFactor, aFMaximum, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.sarLookback(accelerationFactor, aFMaximum) + previous;
         throw new InsufficientData("sar", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sar$default(TaLib var0, double[] var1, double[] var2, double var3, double var5, int var7, int var8, Object var9) {
      if ((var8 & 4) != 0) {
         var3 = 0.02;
      }

      if ((var8 & 8) != 0) {
         var5 = 0.2;
      }

      if ((var8 & 16) != 0) {
         var7 = 0;
      }

      return var0.sar(var1, var2, var3, var5, var7);
   }

   public final double sar(@NotNull PriceBarSeries serie, double accelerationFactor, double aFMaximum, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.sar(serie.getHigh(), serie.getLow(), accelerationFactor, aFMaximum, previous);
   }

   // $FF: synthetic method
   public static double sar$default(TaLib var0, PriceBarSeries var1, double var2, double var4, int var6, int var7, Object var8) {
      if ((var7 & 2) != 0) {
         var2 = 0.02;
      }

      if ((var7 & 4) != 0) {
         var4 = 0.2;
      }

      if ((var7 & 8) != 0) {
         var6 = 0;
      }

      return var0.sar(var1, var2, var4, var6);
   }

   public final double sarExt(@NotNull double[] high, @NotNull double[] low, double startValue, double offsetonReverse, double aFInitLong, double aFLong, double aFMaxLong, double aFInitShort, double aFShort, double aFMaxShort, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sarExt(endIdx, endIdx, high, low, startValue, offsetonReverse, aFInitLong, aFLong, aFMaxLong, aFInitShort, aFShort, aFMaxShort, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.sarExtLookback(startValue, offsetonReverse, aFInitLong, aFLong, aFMaxLong, aFInitShort, aFShort, aFMaxShort) + previous;
         throw new InsufficientData("sarExt", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sarExt$default(TaLib var0, double[] var1, double[] var2, double var3, double var5, double var7, double var9, double var11, double var13, double var15, double var17, int var19, int var20, Object var21) {
      if ((var20 & 4) != 0) {
         var3 = (double)0.0F;
      }

      if ((var20 & 8) != 0) {
         var5 = (double)0.0F;
      }

      if ((var20 & 16) != 0) {
         var7 = 0.02;
      }

      if ((var20 & 32) != 0) {
         var9 = 0.02;
      }

      if ((var20 & 64) != 0) {
         var11 = 0.2;
      }

      if ((var20 & 128) != 0) {
         var13 = 0.02;
      }

      if ((var20 & 256) != 0) {
         var15 = 0.02;
      }

      if ((var20 & 512) != 0) {
         var17 = 0.2;
      }

      if ((var20 & 1024) != 0) {
         var19 = 0;
      }

      return var0.sarExt(var1, var2, var3, var5, var7, var9, var11, var13, var15, var17, var19);
   }

   public final double sarExt(@NotNull PriceBarSeries serie, double startValue, double offsetonReverse, double aFInitLong, double aFLong, double aFMaxLong, double aFInitShort, double aFShort, double aFMaxShort, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.sarExt(serie.getHigh(), serie.getLow(), startValue, offsetonReverse, aFInitLong, aFLong, aFMaxLong, aFInitShort, aFShort, aFMaxShort, previous);
   }

   // $FF: synthetic method
   public static double sarExt$default(TaLib var0, PriceBarSeries var1, double var2, double var4, double var6, double var8, double var10, double var12, double var14, double var16, int var18, int var19, Object var20) {
      if ((var19 & 2) != 0) {
         var2 = (double)0.0F;
      }

      if ((var19 & 4) != 0) {
         var4 = (double)0.0F;
      }

      if ((var19 & 8) != 0) {
         var6 = 0.02;
      }

      if ((var19 & 16) != 0) {
         var8 = 0.02;
      }

      if ((var19 & 32) != 0) {
         var10 = 0.2;
      }

      if ((var19 & 64) != 0) {
         var12 = 0.02;
      }

      if ((var19 & 128) != 0) {
         var14 = 0.02;
      }

      if ((var19 & 256) != 0) {
         var16 = 0.2;
      }

      if ((var19 & 512) != 0) {
         var18 = 0;
      }

      return var0.sarExt(var1, var2, var4, var6, var8, var10, var12, var14, var16, var18);
   }

   public final double sin(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sin(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.sinLookback() + previous;
         throw new InsufficientData("sin", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sin$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.sin(var1, var2);
   }

   public final double sin(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.sin(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double sin$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.sin(var1, var2);
   }

   public final double sinh(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sinh(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.sinhLookback() + previous;
         throw new InsufficientData("sinh", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sinh$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.sinh(var1, var2);
   }

   public final double sinh(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.sinh(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double sinh$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.sinh(var1, var2);
   }

   public final double sma(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sma(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.smaLookback(timePeriod) + previous;
         throw new InsufficientData("sma", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sma$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.sma(var1, var2, var3);
   }

   public final double sma(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.sma(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double sma$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.sma(var1, var2, var3);
   }

   public final double sqrt(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sqrt(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.sqrtLookback() + previous;
         throw new InsufficientData("sqrt", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sqrt$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.sqrt(var1, var2);
   }

   public final double sqrt(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.sqrt(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double sqrt$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.sqrt(var1, var2);
   }

   public final double stdDev(@NotNull double[] data, int timePeriod, double deviations, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.stdDev(endIdx, endIdx, data, timePeriod, deviations, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.stdDevLookback(timePeriod, deviations) + previous;
         throw new InsufficientData("stdDev", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double stdDev$default(TaLib var0, double[] var1, int var2, double var3, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 5;
      }

      if ((var6 & 4) != 0) {
         var3 = (double)1.0F;
      }

      if ((var6 & 8) != 0) {
         var5 = 0;
      }

      return var0.stdDev(var1, var2, var3, var5);
   }

   public final double stdDev(@NotNull PriceBarSeries serie, int timePeriod, double deviations, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.stdDev(serie.getClose(), timePeriod, deviations, previous);
   }

   // $FF: synthetic method
   public static double stdDev$default(TaLib var0, PriceBarSeries var1, int var2, double var3, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 5;
      }

      if ((var6 & 4) != 0) {
         var3 = (double)1.0F;
      }

      if ((var6 & 8) != 0) {
         var5 = 0;
      }

      return var0.stdDev(var1, var2, var3, var5);
   }

   @NotNull
   public final Pair stoch(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int fastKPeriod, int slowKPeriod, @NotNull MAType slowKMA, int slowDPeriod, @NotNull MAType slowDMA, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      Intrinsics.checkNotNullParameter(slowKMA, "slowKMA");
      Intrinsics.checkNotNullParameter(slowDMA, "slowDMA");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.stoch(endIdx, endIdx, high, low, close, fastKPeriod, slowKPeriod, slowKMA, slowDPeriod, slowDMA, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.stochLookback(fastKPeriod, slowKPeriod, slowKMA, slowDPeriod, slowDMA) + previous;
         throw new InsufficientData("stoch", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair stoch$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, MAType var6, int var7, MAType var8, int var9, int var10, Object var11) {
      if ((var10 & 8) != 0) {
         var4 = 5;
      }

      if ((var10 & 16) != 0) {
         var5 = 3;
      }

      if ((var10 & 32) != 0) {
         var6 = MAType.Ema;
      }

      if ((var10 & 64) != 0) {
         var7 = 3;
      }

      if ((var10 & 128) != 0) {
         var8 = MAType.Ema;
      }

      if ((var10 & 256) != 0) {
         var9 = 0;
      }

      return var0.stoch(var1, var2, var3, var4, var5, var6, var7, var8, var9);
   }

   @NotNull
   public final Pair stoch(@NotNull PriceBarSeries serie, int fastKPeriod, int slowKPeriod, @NotNull MAType slowKMA, int slowDPeriod, @NotNull MAType slowDMA, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(slowKMA, "slowKMA");
      Intrinsics.checkNotNullParameter(slowDMA, "slowDMA");
      return this.stoch(serie.getHigh(), serie.getLow(), serie.getClose(), fastKPeriod, slowKPeriod, slowKMA, slowDPeriod, slowDMA, previous);
   }

   // $FF: synthetic method
   public static Pair stoch$default(TaLib var0, PriceBarSeries var1, int var2, int var3, MAType var4, int var5, MAType var6, int var7, int var8, Object var9) {
      if ((var8 & 2) != 0) {
         var2 = 5;
      }

      if ((var8 & 4) != 0) {
         var3 = 3;
      }

      if ((var8 & 8) != 0) {
         var4 = MAType.Ema;
      }

      if ((var8 & 16) != 0) {
         var5 = 3;
      }

      if ((var8 & 32) != 0) {
         var6 = MAType.Ema;
      }

      if ((var8 & 64) != 0) {
         var7 = 0;
      }

      return var0.stoch(var1, var2, var3, var4, var5, var6, var7);
   }

   @NotNull
   public final Pair stochF(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int fastKPeriod, int fastDPeriod, @NotNull MAType fastDMA, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      Intrinsics.checkNotNullParameter(fastDMA, "fastDMA");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.stochF(endIdx, endIdx, high, low, close, fastKPeriod, fastDPeriod, fastDMA, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.stochFLookback(fastKPeriod, fastDPeriod, fastDMA) + previous;
         throw new InsufficientData("stochF", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair stochF$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, MAType var6, int var7, int var8, Object var9) {
      if ((var8 & 8) != 0) {
         var4 = 5;
      }

      if ((var8 & 16) != 0) {
         var5 = 3;
      }

      if ((var8 & 32) != 0) {
         var6 = MAType.Ema;
      }

      if ((var8 & 64) != 0) {
         var7 = 0;
      }

      return var0.stochF(var1, var2, var3, var4, var5, var6, var7);
   }

   @NotNull
   public final Pair stochF(@NotNull PriceBarSeries serie, int fastKPeriod, int fastDPeriod, @NotNull MAType fastDMA, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(fastDMA, "fastDMA");
      return this.stochF(serie.getHigh(), serie.getLow(), serie.getClose(), fastKPeriod, fastDPeriod, fastDMA, previous);
   }

   // $FF: synthetic method
   public static Pair stochF$default(TaLib var0, PriceBarSeries var1, int var2, int var3, MAType var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 5;
      }

      if ((var6 & 4) != 0) {
         var3 = 3;
      }

      if ((var6 & 8) != 0) {
         var4 = MAType.Ema;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.stochF(var1, var2, var3, var4, var5);
   }

   @NotNull
   public final Pair stochRsi(@NotNull double[] data, int timePeriod, int fastKPeriod, int fastDPeriod, @NotNull MAType fastDMA, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      Intrinsics.checkNotNullParameter(fastDMA, "fastDMA");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      double[] output2 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.stochRsi(endIdx, endIdx, data, timePeriod, fastKPeriod, fastDPeriod, fastDMA, startOutput, endOutput, output1, output2);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.stochRsiLookback(timePeriod, fastKPeriod, fastDPeriod, fastDMA) + previous;
         throw new InsufficientData("stochRsi", lookback + 1);
      } else {
         return new Pair(output1[0], output2[0]);
      }
   }

   // $FF: synthetic method
   public static Pair stochRsi$default(TaLib var0, double[] var1, int var2, int var3, int var4, MAType var5, int var6, int var7, Object var8) {
      if ((var7 & 2) != 0) {
         var2 = 14;
      }

      if ((var7 & 4) != 0) {
         var3 = 5;
      }

      if ((var7 & 8) != 0) {
         var4 = 3;
      }

      if ((var7 & 16) != 0) {
         var5 = MAType.Ema;
      }

      if ((var7 & 32) != 0) {
         var6 = 0;
      }

      return var0.stochRsi(var1, var2, var3, var4, var5, var6);
   }

   @NotNull
   public final Pair stochRsi(@NotNull PriceBarSeries serie, int timePeriod, int fastKPeriod, int fastDPeriod, @NotNull MAType fastDMA, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      Intrinsics.checkNotNullParameter(fastDMA, "fastDMA");
      return this.stochRsi(serie.getClose(), timePeriod, fastKPeriod, fastDPeriod, fastDMA, previous);
   }

   // $FF: synthetic method
   public static Pair stochRsi$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, MAType var5, int var6, int var7, Object var8) {
      if ((var7 & 2) != 0) {
         var2 = 14;
      }

      if ((var7 & 4) != 0) {
         var3 = 5;
      }

      if ((var7 & 8) != 0) {
         var4 = 3;
      }

      if ((var7 & 16) != 0) {
         var5 = MAType.Ema;
      }

      if ((var7 & 32) != 0) {
         var6 = 0;
      }

      return var0.stochRsi(var1, var2, var3, var4, var5, var6);
   }

   public final double sub(@NotNull double[] data0, @NotNull double[] data1, int previous) {
      Intrinsics.checkNotNullParameter(data0, "data0");
      Intrinsics.checkNotNullParameter(data1, "data1");
      int endIdx = ArraysKt.getLastIndex(data0) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sub(endIdx, endIdx, data0, data1, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.subLookback() + previous;
         throw new InsufficientData("sub", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sub$default(TaLib var0, double[] var1, double[] var2, int var3, int var4, Object var5) {
      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.sub(var1, var2, var3);
   }

   public final double sum(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.sum(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.sumLookback(timePeriod) + previous;
         throw new InsufficientData("sum", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double sum$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.sum(var1, var2, var3);
   }

   public final double sum(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.sum(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double sum$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.sum(var1, var2, var3);
   }

   public final double t3(@NotNull double[] data, int timePeriod, double volumeFactor, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.t3(endIdx, endIdx, data, timePeriod, volumeFactor, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.t3Lookback(timePeriod, volumeFactor) + previous;
         throw new InsufficientData("t3", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double t3$default(TaLib var0, double[] var1, int var2, double var3, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 5;
      }

      if ((var6 & 4) != 0) {
         var3 = 0.7;
      }

      if ((var6 & 8) != 0) {
         var5 = 0;
      }

      return var0.t3(var1, var2, var3, var5);
   }

   public final double t3(@NotNull PriceBarSeries serie, int timePeriod, double volumeFactor, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.t3(serie.getClose(), timePeriod, volumeFactor, previous);
   }

   // $FF: synthetic method
   public static double t3$default(TaLib var0, PriceBarSeries var1, int var2, double var3, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 5;
      }

      if ((var6 & 4) != 0) {
         var3 = 0.7;
      }

      if ((var6 & 8) != 0) {
         var5 = 0;
      }

      return var0.t3(var1, var2, var3, var5);
   }

   public final double tan(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.tan(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.tanLookback() + previous;
         throw new InsufficientData("tan", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double tan$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.tan(var1, var2);
   }

   public final double tan(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.tan(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double tan$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.tan(var1, var2);
   }

   public final double tanh(@NotNull double[] data, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.tanh(endIdx, endIdx, data, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.tanhLookback() + previous;
         throw new InsufficientData("tanh", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double tanh$default(TaLib var0, double[] var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.tanh(var1, var2);
   }

   public final double tanh(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.tanh(serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double tanh$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.tanh(var1, var2);
   }

   public final double tema(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.tema(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.temaLookback(timePeriod) + previous;
         throw new InsufficientData("tema", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double tema$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.tema(var1, var2, var3);
   }

   public final double tema(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.tema(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double tema$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.tema(var1, var2, var3);
   }

   public final double trueRange(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.trueRange(endIdx, endIdx, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.trueRangeLookback() + previous;
         throw new InsufficientData("trueRange", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double trueRange$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, Object var6) {
      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.trueRange(var1, var2, var3, var4);
   }

   public final double trueRange(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.trueRange(serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double trueRange$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.trueRange(var1, var2);
   }

   public final double trima(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.trima(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.trimaLookback(timePeriod) + previous;
         throw new InsufficientData("trima", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double trima$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.trima(var1, var2, var3);
   }

   public final double trima(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.trima(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double trima$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.trima(var1, var2, var3);
   }

   public final double trix(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.trix(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.trixLookback(timePeriod) + previous;
         throw new InsufficientData("trix", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double trix$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.trix(var1, var2, var3);
   }

   public final double trix(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.trix(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double trix$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.trix(var1, var2, var3);
   }

   public final double tsf(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.tsf(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.tsfLookback(timePeriod) + previous;
         throw new InsufficientData("tsf", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double tsf$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.tsf(var1, var2, var3);
   }

   public final double tsf(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.tsf(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double tsf$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.tsf(var1, var2, var3);
   }

   public final double typPrice(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.typPrice(endIdx, endIdx, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.typPriceLookback() + previous;
         throw new InsufficientData("typPrice", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double typPrice$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, Object var6) {
      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.typPrice(var1, var2, var3, var4);
   }

   public final double typPrice(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.typPrice(serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double typPrice$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.typPrice(var1, var2);
   }

   public final double ultOsc(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int firstPeriod, int secondPeriod, int thirdPeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.ultOsc(endIdx, endIdx, high, low, close, firstPeriod, secondPeriod, thirdPeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.ultOscLookback(firstPeriod, secondPeriod, thirdPeriod) + previous;
         throw new InsufficientData("ultOsc", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double ultOsc$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, int var7, int var8, Object var9) {
      if ((var8 & 8) != 0) {
         var4 = 7;
      }

      if ((var8 & 16) != 0) {
         var5 = 14;
      }

      if ((var8 & 32) != 0) {
         var6 = 28;
      }

      if ((var8 & 64) != 0) {
         var7 = 0;
      }

      return var0.ultOsc(var1, var2, var3, var4, var5, var6, var7);
   }

   public final double ultOsc(@NotNull PriceBarSeries serie, int firstPeriod, int secondPeriod, int thirdPeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.ultOsc(serie.getHigh(), serie.getLow(), serie.getClose(), firstPeriod, secondPeriod, thirdPeriod, previous);
   }

   // $FF: synthetic method
   public static double ultOsc$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 7;
      }

      if ((var6 & 4) != 0) {
         var3 = 14;
      }

      if ((var6 & 8) != 0) {
         var4 = 28;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.ultOsc(var1, var2, var3, var4, var5);
   }

   public final double variance(@NotNull double[] data, int timePeriod, double deviations, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.variance(endIdx, endIdx, data, timePeriod, deviations, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.varianceLookback(timePeriod, deviations) + previous;
         throw new InsufficientData("variance", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double variance$default(TaLib var0, double[] var1, int var2, double var3, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 5;
      }

      if ((var6 & 4) != 0) {
         var3 = (double)1.0F;
      }

      if ((var6 & 8) != 0) {
         var5 = 0;
      }

      return var0.variance(var1, var2, var3, var5);
   }

   public final double variance(@NotNull PriceBarSeries serie, int timePeriod, double deviations, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.variance(serie.getClose(), timePeriod, deviations, previous);
   }

   // $FF: synthetic method
   public static double variance$default(TaLib var0, PriceBarSeries var1, int var2, double var3, int var5, int var6, Object var7) {
      if ((var6 & 2) != 0) {
         var2 = 5;
      }

      if ((var6 & 4) != 0) {
         var3 = (double)1.0F;
      }

      if ((var6 & 8) != 0) {
         var5 = 0;
      }

      return var0.variance(var1, var2, var3, var5);
   }

   public final double wclPrice(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.wclPrice(endIdx, endIdx, high, low, close, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.wclPriceLookback() + previous;
         throw new InsufficientData("wclPrice", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double wclPrice$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, Object var6) {
      if ((var5 & 8) != 0) {
         var4 = 0;
      }

      return var0.wclPrice(var1, var2, var3, var4);
   }

   public final double wclPrice(@NotNull PriceBarSeries serie, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.wclPrice(serie.getHigh(), serie.getLow(), serie.getClose(), previous);
   }

   // $FF: synthetic method
   public static double wclPrice$default(TaLib var0, PriceBarSeries var1, int var2, int var3, Object var4) {
      if ((var3 & 2) != 0) {
         var2 = 0;
      }

      return var0.wclPrice(var1, var2);
   }

   public final double willR(@NotNull double[] high, @NotNull double[] low, @NotNull double[] close, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(high, "high");
      Intrinsics.checkNotNullParameter(low, "low");
      Intrinsics.checkNotNullParameter(close, "close");
      int endIdx = ArraysKt.getLastIndex(high) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.willR(endIdx, endIdx, high, low, close, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.willRLookback(timePeriod) + previous;
         throw new InsufficientData("willR", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double willR$default(TaLib var0, double[] var1, double[] var2, double[] var3, int var4, int var5, int var6, Object var7) {
      if ((var6 & 8) != 0) {
         var4 = 14;
      }

      if ((var6 & 16) != 0) {
         var5 = 0;
      }

      return var0.willR(var1, var2, var3, var4, var5);
   }

   public final double willR(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.willR(serie.getHigh(), serie.getLow(), serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double willR$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 14;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.willR(var1, var2, var3);
   }

   public final double wma(@NotNull double[] data, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(data, "data");
      int endIdx = ArraysKt.getLastIndex(data) - previous;
      double[] output1 = new double[1];
      MInteger startOutput = new MInteger();
      MInteger endOutput = new MInteger();
      RetCode ret = this.core.wma(endIdx, endIdx, data, timePeriod, startOutput, endOutput, output1);
      if (ret != RetCode.Success) {
         throw new DoesNotComputeException(ret.toString());
      } else if (endOutput.value <= 0) {
         int lookback = this.core.wmaLookback(timePeriod) + previous;
         throw new InsufficientData("wma", lookback + 1);
      } else {
         return output1[0];
      }
   }

   // $FF: synthetic method
   public static double wma$default(TaLib var0, double[] var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.wma(var1, var2, var3);
   }

   public final double wma(@NotNull PriceBarSeries serie, int timePeriod, int previous) {
      Intrinsics.checkNotNullParameter(serie, "serie");
      return this.wma(serie.getClose(), timePeriod, previous);
   }

   // $FF: synthetic method
   public static double wma$default(TaLib var0, PriceBarSeries var1, int var2, int var3, int var4, Object var5) {
      if ((var4 & 2) != 0) {
         var2 = 30;
      }

      if ((var4 & 4) != 0) {
         var3 = 0;
      }

      return var0.wma(var1, var2, var3);
   }

   public TaLib() {
      this((Core)null, 1, (DefaultConstructorMarker)null);
   }
}
